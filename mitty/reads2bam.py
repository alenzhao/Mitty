"""This script takes in a fastq file generated by vcf2reads and aligns it perfectly based on the cheat answers stored
in the qnames

Commandline::

  Usage:
    reads2bam  [-p] --fa_dir=FADIR  --fastq=FASTQ  --bam=BAM  [-v|-V]

  Options:
    -p                      If set indicates fastq is interleaved paired
    --fa_dir=FADIR          Directory where genome is located
    --fasta=FASTQ           Input fasta file
    --bam=BAM               Output bam file
    -v                      Dump detailed logger messages
    -V                      Dump very detailed logger messages
"""
__version__ = '0.1.0'
import docopt
import os
import pysam
from mitty.utility.genome import FastaGenome
import logging
logger = logging.getLogger(__name__)


def sort_and_index_bam(bamfile):
  """Do the filename gymnastics required to end up with a sorted, indexed, bam file."""
  # samtools sort adds a '.bam' to the end of the file name.
  os.rename(bamfile, 'temp.bam')
  pysam.sort('temp.bam', os.path.splitext(bamfile)[0])
  pysam.index(bamfile)
  os.remove('temp.bam')


def align(in_fastq, out_bam, seq_dir = '', paired=False):
  """ref_seqs - [(seq_id, seq_len) ...]  in correct order so they can be recovered from correct_chrom_no"""
  def toggle(_paired=False):
    if _paired:
      while 1:
        yield 0
        yield 1
    else:
      while 1:
        yield 0

  # TODO handle X, Y chromosomes
  def interpret_read_qname(qname, pair):
    qn = qname.split('|')
    return int(qn[0][:-2]), int(qn[2 if not pair else 4]), qn[3 if not pair else 5]

  ref = FastaGenome(seq_dir=seq_dir)
  bam_hdr = {'HD': {'VN': '1.4'},
             'SQ': [{'LN': seq_len, 'SN': seq_id.split(' ')[0]} for seq_id, seq_len in ref.genome_header()]}
  #  Tablet and other viewers get confused by spaces in the seq_id. Losers
  fastq = pysam.Fastqfile(in_fastq)
  out_bamfile = pysam.Samfile(out_bam, 'wb', header=bam_hdr)
  from itertools import izip
  for cnt, (read, pair) in enumerate(izip(fastq, toggle(paired))):
    correct_chrom_no, correct_pos, correct_cigar = interpret_read_qname(read.name, pair)
    a_read = pysam.AlignedRead()
    a_read.flag = 0
    if paired:  # 0x01 flag has to be set to indicate multiple segments
      a_read.flag = 0x81 if pair else 0x41
      #             end2              end1
    a_read.pos = correct_pos - 1  # BAM files are zero indexed
    a_read.tid = correct_chrom_no - 1
    a_read.qname = read.name
    a_read.cigarstring = correct_cigar
    a_read.seq = read.sequence
    a_read.qual = read.quality
    a_read.mapq = 100  # It's better to set this
    out_bamfile.write(a_read)

    if not cnt % 100000:
      logger.debug('{:d} reads done'.format(cnt))

  logger.debug('{:d} reads done'.format(cnt))
  out_bamfile.close()
  sort_and_index_bam(out_bam)

if __name__ == "__main__":
  if len(docopt.sys.argv) < 2:  # Print help message if no options are passed
    docopt.docopt(__doc__, ['-h'])
  else:
    args = docopt.docopt(__doc__, version=__version__)

  if args['-V']:
    logging.basicConfig(level=logging.DEBUG)
  else:
    logging.basicConfig(level=logging.WARNING)

  if args['-v']:
    logger.setLevel(logging.DEBUG)

  align(args['--fastq'], args['--bam'], args['--fa_dir'], paired=True if args['-p'] else False)