Wrapping Mitty for SBG SDK 1.0
------------------------------

Primary instructions for downloading Vargant files and the docker images are here_

.. _here: https://docs.sbgenomics.com/display/developerhub/SDK+Version+1.0

Some tricks to make life easier with the VM, the docker images and the sbgdk
............................................................................

- The Vagrantfile contains a line ``config.vm.synced_folder "~/Code", "/home/vagrant/projects"``
  that can be edited to point to where you want. Don't change this via the VBox GUI because it gets
  overwritten when you do ``vagrant up``

- ``sbg init`` is broken. What works is to copy the ``.sbdk`` folder into your wrapper root folder (the one with the
  ``setup.py`` script). You should change the ``project_name`` field in the ``state.json`` file to match the folder name
  where your wrapper code is placed and the ``name`` field in the ``setup.py`` script.
  The ``schema.json`` file is auto-generated by ``sbg schema`` or ``sbg push``

- You should have an ``__init__.py`` file with your wrappers importing the applicable classes. Only then will ``sbg push``
  properly send the wrappers into the image

- You should not name the wrapper and their directory the same as the application. Initially I had
  ``--/sdk1wrapper/mitty/mitty.py`` as the wrapper code and this gave me a lot of grief (the code would work on the
  container but fail several tests run from outside the container claiming that ``mitty.lib`` was not available). It
  turned out that it was getting confused during testing by the wrapper being named identically.


With "ubuntu" image
+++++++++++++++++++

``settings.json`` (To skip SBG's custom initialization)::

  {"docker_entrypoint": []}

``state.json`` (To use ubuntu 14 image)::

  {"username": "kghosesbg", "image_id": "ubuntu", "project_name": "sbg_mitty"}


Installing Mitty on the container
+++++++++++++++++++++++++++++++++

``~/.pip/pip.conf``::

  [global]
  extra-index-url = https://pip.sbgenomics.com/packages

Installation Commands::

  sbg sh
  apt-get update
  pip install --upgrade pip
  # -> create the file ~/.pip/pip.conf
  apt-get install gfortran wget cmake liblapack-dev python-pip python-dev libhdf5-serial-dev libncurses5-dev python-matplotlib python-scipy
  pip install numpy cython nose h5py pysam
  pip install -U mitty --pre
  # samtools
  cd home
  wget https://github.com/samtools/samtools/releases/download/1.2/samtools-1.2.tar.bz2
  aptitude install libncurses5-dev
  bzip2 -d samtools-1.2.tar.bz2
  tar -xvf samtools-1.2.tar
  cd samtools-1.2
  make -j 8
  make prefix=/usr/local install
  cd
  nosetests mitty  # This also forces compilation


Testing the wrappers
++++++++++++++++++++

::

  sbg test sbg_mitty.mittyw

Pushing the wrappers
++++++++++++++++++++

::

  sbg push '1.24.0.dev0-w2

The convention adopted has been to lead with the Mitty version followed by a dash and then a wrapper version

Questions/Todos
---------------
- How to wrap nested lists (like that for Chromosome and chromosome limits)
- How to handle tools that write out to the same directory as the input file?


Historical
----------

``state.json`` (To use sbg image)::

  {"username": "kghosesbg", "image_id": "sevenbridges/sdkbase:beta", "project_name": "sbg_mitty"}


With sbg base image::

  sbg sh
  aptitude update
  aptitude install gfortran wget cmake liblapack-dev python-pip lapack-devel
  #HDF5 need >1.8.16  https://github.com/h5py/h5py/issues/525
  cd home
  wget http://www.hdfgroup.org/ftp/HDF5/current/src/hdf5-1.8.15-patch1.tar.gz
  tar -xvf hdf5-1.8.15-patch1.tar.gz
  cd hdf5-1.8.15-patch1
  ./configure --prefix=/usr/local  # IMPORTANT!!!
  make
  make install
  cd
  #pip install numpy
  #pip install cython
  #pip install h5py
  pip install --upgrade pip
  hash -r
  mkdir ~/.pip # Add the SBG pip server to ~/.pip/pip.conf
  pip install -U mitty --pre
  #Matplotlib etc
  aptitude install python-matplotlib python-scipy
  pip install -U matplotlib
  # samtools
  wget https://github.com/samtools/samtools/releases/download/1.2/samtools-1.2.tar.bz2
  aptitude install libncurses5-dev
  bzip2 -d samtools-1.2.tar.bz2
  tar -xvf samtools-1.2.tar
  cd samtools-1.2
  make
  make prefix=/usr/local install